package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_PacemakerCluster = map[string]string{
	"":         "Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "spec is an empty spec to satisfy Kubernetes API conventions. PacemakerCluster is a status-only resource and does not use spec for configuration.",
	"status":   "status contains the actual pacemaker cluster status information collected from the cluster. This follows the Design Principle: Act on Deterministic Information. When not present, pacemaker status is treated as unknown and no actions are taken by the cluster-etcd-operator.",
}

func (PacemakerCluster) SwaggerDoc() map[string]string {
	return map_PacemakerCluster
}

var map_PacemakerClusterList = map[string]string{
	"":         "PacemakerClusterList contains a list of PacemakerCluster objects.\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "items is a list of PacemakerCluster objects.",
}

func (PacemakerClusterList) SwaggerDoc() map[string]string {
	return map_PacemakerClusterList
}

var map_PacemakerClusterSpec = map[string]string{
	"": "PacemakerClusterSpec is an empty spec as PacemakerCluster is a status-only resource",
}

func (PacemakerClusterSpec) SwaggerDoc() map[string]string {
	return map_PacemakerClusterSpec
}

var map_PacemakerClusterStatus = map[string]string{
	"":                "PacemakerClusterStatus contains the actual pacemaker cluster status information",
	"lastUpdated":     "lastUpdated is the timestamp when this status was last updated When present, it must be a valid timestamp in RFC3339 format. This is the only required field in the status object because we can use it to warn if the status collection has gone stale.",
	"rawXML":          "rawXML contains the raw XML output from pcs status xml command. Kept for debugging purposes only; healthcheck should not need to parse this. When present, it must be between 1 and 262144 characters long (max 256KB). This limit protects the API from XML bombs and excessive memory consumption. When not present, the raw XML output is not available.",
	"collectionError": "collectionError contains any error encountered while collecting status When present, it must be between 1 and 2048 characters long (max 2KB). This limit ensures that the error message can be displayed in a human-readable format. When not present, no collection errors are available and the status collection is assumed to be successful.",
	"summary":         "summary provides high-level counts and flags for the cluster state When present, it must be a valid PacemakerSummary object. When not present, the summary is not available. This likely indicates that there is an error parsing the raw XML output.",
	"nodes":           "nodes provides detailed information about each node in the cluster When present, it must be a list of 1 or 2 PacemakerNodeStatus objects. Two is expected in a healthy cluster. When not present, the nodes are not available. This likely indicates that there is an error parsing the raw XML output. If only one node is present, this indicates that the cluster is in the process of replacing a failed node.",
	"resources":       "resources provides detailed information about each resource in the cluster When present, it must be a list of 1 or more PacemakerResourceStatus objects. When not present, the resources are not available. This likely indicates that there is an error parsing the raw XML output. The number of resources is expected to be between 1 and 16, but is most likely to be exactly 6. The critical resources that expect to run on both nodes are: kubelet, etcd, and a fencing resource (i.e. redfish) for each node. This could drift over time as Two Node Fencing matures, so this is left flexible.",
	"nodeHistory":     "nodeHistory provides recent operation history for troubleshooting When present, it must be a list of 1 or more PacemakerNodeHistoryEntry objects. When not present, the node history is not available. This is the expected status for a healthy cluster. Node history being capped at 16 is a reasonable limit to prevent abuse of the API, since the action history reported by the cluster is presented as a recorded event. The healthchecker runs every 30 seconds and creates events for failed operations that occured within the last 5 minutes (unless they have already been reported).",
	"fencingHistory":  "fencingHistory provides recent fencing events When present, it must be a list of 1 or more PacemakerFencingEvent objects. When not present, the fencing history is not available. This is the expected status for a healthy cluster. Fencing history being capped at 16 is a reasonable limit to prevent abuse of the API, since the fencing history reported by the cluster is presented as a recorded event. The healthchecker runs every 30 seconds and creates events for fencing events that occured within the last 24 hours (unless they have already been reported).",
}

func (PacemakerClusterStatus) SwaggerDoc() map[string]string {
	return map_PacemakerClusterStatus
}

var map_PacemakerFencingEvent = map[string]string{
	"":          "PacemakerFencingEvent represents a single fencing event from fence history",
	"target":    "target is the node that was fenced When present, it must be a valid string between 1 and 256 characters long. When not present,the target node is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"action":    "action is the fencing action performed FencingActionType can be one of the following values: - reboot - the node was rebooted - off - the node was turned off - on - the node was turned on When present, it must be a valid FencingActionType. When not present, the fencing action is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"status":    "status is the status of the fencing operation FencingStatusType can be one of the following values: - success - the fencing event was successful - failed - the fencing event failed - pending - the fencing event is pending When present, it must be a valid FencingStatusType. When not present, the fencing status is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"completed": "completed is the timestamp when the fencing event was completed When present, it must be a valid timestamp in RFC3339 format. When not present, the completed timestamp is unknown. This likely indicates that there is an error parsing the raw XML output.",
}

func (PacemakerFencingEvent) SwaggerDoc() map[string]string {
	return map_PacemakerFencingEvent
}

var map_PacemakerNodeHistoryEntry = map[string]string{
	"":             "PacemakerNodeHistoryEntry represents a single operation history entry from node_history",
	"node":         "node is the node where the operation occurred When present, it must be a valid string between 1 and 256 characters long. When not present, the resource name is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"resource":     "resource is the resource that was operated on When present, it must be a valid string between 1 and 256 characters long. When not present, the resource name is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"operation":    "operation is the operation that was performed (e.g., \"monitor\", \"start\", \"stop\") Unlike other fields, this is not an enum because while \"monitor\", \"start\" and \"stop\" are the most common, resource agents can define their own operations. When present, it must be a valid string between 1 and 16 characters long. When not present, the operation is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"rc":           "rc is the return code from the operation When present, it must be a valid integer between 0 and 2147483647 (max 32-bit int) inclusive. When not present, the return code is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"rcText":       "rcText is the human-readable return code text (e.g., \"ok\", \"error\", \"not running\") When present, it must be a valid string between 1 and 32 characters long. This is a human-readable string and is not validated against any specific format. When not present, the return code text is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"lastRCChange": "lastRCChange is the timestamp when the RC last changed When present, it must be a valid timestamp in RFC3339 format. When not present, the last RC change timestamp is unknown. This likely indicates that there is an error parsing the raw XML output.",
}

func (PacemakerNodeHistoryEntry) SwaggerDoc() map[string]string {
	return map_PacemakerNodeHistoryEntry
}

var map_PacemakerNodeStatus = map[string]string{
	"":             "NodeStatus represents the status of a single node in the Pacemaker cluster",
	"name":         "name is the name of the node When present, it must be a valid string between 1 and 256 characters long. When not present, the node name is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"ipAddress":    "ipAddress is the canonical IPv4 or IPv6 address of the node When present, it must be a valid canonical global unicast IPv4 or IPv6 address (including private/RFC1918 addresses). This excludes special addresses like unspecified, loopback, link-local, and multicast. When not present, the IP address is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"onlineStatus": "onlineStatus indicates if the node is online or offline NodeOnlineStatusType can be one of the following values: - Online - the node is online - Offline - the node is offline When present, it must be a valid NodeOnlineStatusType. When not present, the online status is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"mode":         "mode indicates if the node is in active or standby mode NodeModeType can be one of the following values: - Active - the node is in active mode - Standby - the node is in standby mode When present, it must be a valid NodeModeType. When not present, the node mode is unknown. This likely indicates that there is an error parsing the raw XML output.",
}

func (PacemakerNodeStatus) SwaggerDoc() map[string]string {
	return map_PacemakerNodeStatus
}

var map_PacemakerResourceStatus = map[string]string{
	"":              "PacemakerResourceStatus represents the status of a single resource in the Pacemaker cluster",
	"name":          "name is the name of the resource When present, it must be a valid string between 1 and 256 characters long. When not present, the resource name is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"resourceAgent": "resourceAgent is the resource agent type (e.g., \"ocf:heartbeat:IPaddr2\", \"systemd:kubelet\") When present, it must be a valid string between 1 and 256 characters long. When not present, the resource agent type is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"role":          "role is the current role of the resource ResourceRoleType can be one of the following values: - Started - the resource is started - Stopped - the resource is stopped We don't use promoted and unpromoted, so resources in those roles would omit the role field. When present, it must be a valid ResourceRoleType. When not present, the resource role is unknown (or an unsupported type like promoted or unpromoted). This likely indicates that there is an error parsing the raw XML output.",
	"activeStatus":  "activeStatus indicates if the resource is active or inactive ResourceActiveStatusType can be one of the following values: - Active - the resource is active - Inactive - the resource is inactive When present, it must be a valid ResourceActiveStatusType. When not present, the active status is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"node":          "node is the node where the resource is running When present, it must be a valid string between 1 and 256 characters long. When not present, the node name is unknown. This likely indicates that there is an error parsing the raw XML output.",
}

func (PacemakerResourceStatus) SwaggerDoc() map[string]string {
	return map_PacemakerResourceStatus
}

var map_PacemakerSummary = map[string]string{
	"":                     "PacemakerSummary provides a high-level summary of cluster state",
	"pacemakerDaemonState": "pacemakerDaemonState indicates the state of the pacemaker daemon PacemakerDaemonStateType can be one of the following values: - Running - the pacemaker daemon is in the 'running' state - KnownNotRunning - the pacemaker daemon is not in the 'running' state. This is left as a blanket state\n  to cover states like init, wait_for_ping, starting_daemons, shutting_down, shutdown_complete, etc.\nWhen present, it must be a valid PacemakerDaemonStateType. When not present, the pacemaker daemon state is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"quorumStatus":         "quorumStatus indicates if the cluster has quorum QuorumStatusType can be one of the following values: - Quorate - the cluster has quorum - NoQuorum - the cluster does not have quorum When present, it must be a valid QuorumStatusType. When not present, the quorum status is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"nodesOnline":          "nodesOnline is the count of online nodes When present, it must be a valid integer between 0 and 2 inclusive. When not present, the nodes online count is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"nodesTotal":           "nodesTotal is the total count of configured nodes When present, it must be a valid integer between 0 and 2 inclusive. When not present, the nodes total count is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"resourcesStarted":     "resourcesStarted is the count of started resources When present, it must be a valid integer between 0 and 16 inclusive. For a healthy Two Node Fencing (TNF) cluster, this is expected to be 6. The expected resources are kubelet, etcd, and a fencing resource (i.e. redfish) for each node. The number could be less than 6 if the cluster is starting up or not healthy. The total number of resources managed by the cluster could drift over time as Two Node Fencing matures, so this is left flexible. When not present, the resources started count is unknown. This likely indicates that there is an error parsing the raw XML output.",
	"resourcesTotal":       "resourcesTotal is the total count of configured resources When present, it must be a valid integer between 0 and 16 inclusive. For a healthy Two Node Fencing (TNF) cluster, this is expected to be 6. The expected resources are kubelet, etcd, and a fencing resource (i.e. redfish) for each node. The total number of resources managed by the cluster could drift over time as Two Node Fencing matures, so this is left flexible. When not present, the resources total count is unknown. This likely indicates that there is an error parsing the raw XML output.",
}

func (PacemakerSummary) SwaggerDoc() map[string]string {
	return map_PacemakerSummary
}

// AUTO-GENERATED FUNCTIONS END HERE
