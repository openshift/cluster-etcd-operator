# Common environment variables
ASSET_DIR="/home/core/assets"
CONFIG_FILE_DIR="/etc/kubernetes"
MANIFEST_DIR="${CONFIG_FILE_DIR}/manifests"
ETCD_DATA_DIR="/var/lib/etcd"
ETCD_DATA_DIR_BACKUP="/var/lib/etcd-backup"
MANIFEST_STOPPED_DIR="${ASSET_DIR}/manifests-stopped"
RESTORE_ETCD_POD_YAML="${CONFIG_FILE_DIR}/static-pod-resources/etcd-certs/configmaps/restore-etcd-pod/pod.yaml"
QUORUM_RESTORE_ETCD_POD_YAML="${CONFIG_FILE_DIR}/static-pod-resources/etcd-certs/configmaps/restore-etcd-pod/quorum-restore-pod.yaml"
ETCDCTL_BIN_DIR="${CONFIG_FILE_DIR}/static-pod-resources/bin"
PATH=${PATH}:${ETCDCTL_BIN_DIR}
export KUBECONFIG="/etc/kubernetes/static-pod-resources/kube-apiserver-certs/secrets/node-kubeconfigs/localhost.kubeconfig"
export ETCD_ETCDCTL_BIN="etcdctl"

# download etcdctl from download release image
function dl_etcdctl {
  # Avoid caching the binary when podman exists, the etcd image is always available locally and we need a way to update etcdctl.
  # When we're running from an etcd image there's no podman and we can continue without a download.
  if ([ -n "$(command -v podman)" ]); then
     local etcdimg=${ETCD_IMAGE}
     local etcdctr=$(podman create --authfile=/var/lib/kubelet/config.json ${etcdimg})
     local etcdmnt=$(podman mount "${etcdctr}")
     [ ! -d ${ETCDCTL_BIN_DIR} ] && mkdir -p ${ETCDCTL_BIN_DIR}
     cp ${etcdmnt}/bin/etcdctl ${ETCDCTL_BIN_DIR}/
     if [ -f "${etcdmnt}/bin/etcdutl" ]; then
       cp ${etcdmnt}/bin/etcdutl ${ETCDCTL_BIN_DIR}/
       export ETCD_ETCDUTL_BIN=etcdutl
     fi

     umount "${etcdmnt}"
     podman rm "${etcdctr}"
     etcdctl version
     return
  fi

  if ([ -x "$(command -v etcdctl)" ]); then
    echo "etcdctl is already installed"
    if [ -x "$(command -v etcdutl)" ]; then
      echo "etcdutl is already installed"
      export ETCD_ETCDUTL_BIN=etcdutl
    fi

    return
  fi

  echo "Could neither pull etcdctl nor find it locally in cache. Aborting!"
  exit 1
}

function check_snapshot_status() {
  local snap_file="$1"

  ETCD_CLIENT="${ETCD_ETCDCTL_BIN}"
  if [ -n "${ETCD_ETCDUTL_BIN}" ]; then
    ETCD_CLIENT="${ETCD_ETCDUTL_BIN}"
  fi

  if ! ${ETCD_CLIENT} snapshot status "${snap_file}" -w json; then
    echo "Backup integrity verification failed. Backup appears corrupted. Aborting!"
    return 1
  fi
}

function stop_containers() {
  local containers=("$@")

  for container_name in "${containers[@]}"; do
    echo "Stopping container ${container_name}"
    CID=$(crictl ps --label io.kubernetes.container.name="${container_name}" -q)
    crictl stop -t 30 "${CID+done}"
    while [[ -n $(crictl ps --label io.kubernetes.container.name="${container_name}" -q) ]]; do
      echo -n "."
      sleep 1
    done
    echo "complete"
  done
}

function await_mirror_pod_removal() {
   # we allow to skip this, because the detection logic through kubelet logs is imperfect
   if [ -n "${ETCD_RESTORE_SKIP_MIRROR_POD_CHECK}" ]; then
      echo "skip check for etcd mirror pod deletion in kubelet"
      return
   fi

   echo "Waiting for etcd mirror pod deletion in kubelet"
   local msg="\"Deleting a mirror pod\" pod=\"openshift-etcd/etcd"
   while [[ -z $(journalctl -u kubelet --no-tail -n 1000 -g "${msg}") ]]; do
     echo -n "."
     sleep 1
   done
   echo "complete"
}

function wait_for_containers_to_stop() {
  local containers=("$@")

  for container_name in "${containers[@]}"; do
    echo "Waiting for container ${container_name} to stop"
    while [[ -n $(crictl ps --label io.kubernetes.container.name="${container_name}" -q) ]]; do
      echo -n "."
      sleep 1
    done
    echo "complete"
  done
}

function mv_static_pods() {
  local containers=("$@")

  # Move manifests and stop static pods
  if [ ! -d "$MANIFEST_STOPPED_DIR" ]; then
    mkdir -p "$MANIFEST_STOPPED_DIR"
  fi

  for POD_FILE_NAME in "${containers[@]}"; do
    echo "...stopping ${POD_FILE_NAME}"
    [ ! -f "${MANIFEST_DIR}/${POD_FILE_NAME}" ] && continue
    mv "${MANIFEST_DIR}/${POD_FILE_NAME}" "${MANIFEST_STOPPED_DIR}"
  done
}
