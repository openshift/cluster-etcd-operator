apiVersion: v1
kind: Pod
metadata:
  name: etcd
  namespace: openshift-etcd
  # we set a static UUID here to tell kubelet that this is different pod to what's usually running
  # this ensures that the pod status is correctly updated
  uid: 55aed6ab-58f5-4ae2-bf1c-54be36669b8a
  labels:
    app: etcd
    k8s-app: etcd
    etcd: "true"
    revision: "REVISION"
spec:
  containers:
  - name: etcd
    image: ${IMAGE}
    imagePullPolicy: IfNotPresent
    terminationMessagePolicy: FallbackToLogsOnError
    command:
      - /bin/sh
      - -c
      - |
        #!/bin/sh
        set -euo pipefail
               
        export ETCD_NAME=${NODE_NODE_ENVVAR_NAME_ETCD_NAME}
        export ETCD_INITIAL_CLUSTER="${ETCD_NAME}=https://${NODE_NODE_ENVVAR_NAME_ETCD_URL_HOST}:2380"
        env | grep ETCD | grep -v NODE
        export ETCD_NODE_PEER_URL=https://${NODE_NODE_ENVVAR_NAME_ETCD_URL_HOST}:2380
        export REV_JSON="/var/lib/etcd-backup/revision.json"
        export SNAPSHOT_FILE="/var/lib/etcd-backup/snapshot.db"

        # checking if data directory is empty, if not etcdctl restore will fail         
        if [ -n "$(ls -A "/var/lib/etcd")" ]; then
          echo "please delete the contents of the /var/lib/etcd directory before restoring, running the restore script will do this for you"
          exit 1
        fi
        
        ETCD_ETCDCTL_BIN="etcdctl"
        if [ -x "$(command -v etcdutl)" ]; then
          echo "found etcdutl, using that instead of etcdctl for local operations"
          ETCD_ETCDCTL_BIN="etcdutl"
        fi      

        # check if we have backup file to be restored
        # if the file exist, check if it has not changed size in last 5 seconds
        if [ ! -f "${SNAPSHOT_FILE}" ]; then
          echo "please make a copy of the snapshot db file, then move that copy to ${SNAPSHOT_FILE}"
          exit 1
        else
          filesize=$(stat --format=%s "${SNAPSHOT_FILE}")
          sleep 5
          newfilesize=$(stat --format=%s "${SNAPSHOT_FILE}")
          if [ "$filesize" != "$newfilesize" ]; then
            echo "file size has changed since last 5 seconds, retry sometime after copying is complete"
            exit 1
          fi
        fi
        
        SNAPSHOT_REV=$(etcdutl snapshot status -wjson "$SNAPSHOT_FILE" | jq -r ".revision")
        echo "snapshot is at revision ${SNAPSHOT_REV}"
        
        if [ -n "$(ls -A "${REV_JSON}")" ]; then
           # this will bump by the amount of the last known live revision + 20% slack.
           # Note: the bump amount is an addition to the current revision stored in the snapshot.
           # We're avoiding to do any math with SNAPSHOT_REV, uint64 has plenty of space to double revisions
           # and we're assuming that full disaster restores are a very rare occurrence anyway.
           BUMP_REV=$(jq -r "(.maxRaftIndex*1.2|floor)" "${REV_JSON}")
           echo "bumping revisions by ${BUMP_REV}"
        else
           # we can't take SNAPSHOT_REV as an indicator here, because the snapshot might be much older
           # than any currently live served revision. 
           # 1bn would be an etcd running at 1000 writes/s for about eleven days.
           echo "no revision.json found, assuming a 1bn revision bump"
           BUMP_REV=1000000000
        fi
        
        UUID=$(uuidgen)
        echo "restoring to a single node cluster"
        ${ETCD_ETCDCTL_BIN} snapshot restore "${SNAPSHOT_FILE}" \
         --name $ETCD_NAME \
         --initial-cluster=$ETCD_INITIAL_CLUSTER \
         --initial-cluster-token "openshift-etcd-${UUID}" \
         --initial-advertise-peer-urls $ETCD_NODE_PEER_URL \
         --data-dir="/var/lib/etcd/restore-${UUID}" \
         --mark-compacted \
         --bump-revision "${BUMP_REV}"

        mv /var/lib/etcd/restore-${UUID}/* /var/lib/etcd/
        # copy the revision.json back in case a second restore needs to be run afterwards
        if [ -n "$(ls -A "${REV_JSON}")" ]; then
           cp ${REV_JSON} /var/lib/etcd/
        fi

        rmdir /var/lib/etcd/restore-${UUID}
        rm /var/lib/etcd-backup/snapshot.db

        set -x
        exec etcd \
          --logger=zap \
          --log-level=${VERBOSITY} \
          --initial-advertise-peer-urls=https://${NODE_NODE_ENVVAR_NAME_IP}:2380 \
          --cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-certs/etcd-serving-NODE_NAME.crt \
          --key-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-certs/etcd-serving-NODE_NAME.key \
          --trusted-ca-file=/etc/kubernetes/static-pod-certs/configmaps/etcd-all-bundles/server-ca-bundle.crt \
          --client-cert-auth=true \
          --peer-cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-certs/etcd-peer-NODE_NAME.crt \
          --peer-key-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-certs/etcd-peer-NODE_NAME.key \
          --peer-trusted-ca-file=/etc/kubernetes/static-pod-certs/configmaps/etcd-all-bundles/server-ca-bundle.crt \
          --peer-client-cert-auth=true \
          --advertise-client-urls=https://${NODE_NODE_ENVVAR_NAME_IP}:2379 \
          --listen-client-urls=https://${LISTEN_ON_ALL_IPS}:2379 \
          --listen-peer-urls=https://${LISTEN_ON_ALL_IPS}:2380 \
          --metrics=extensive \
          --listen-metrics-urls=https://${LISTEN_ON_ALL_IPS}:9978
    env:
${COMPUTED_ENV_VARS}
      - name: "ETCD_STATIC_POD_REV"
        value: "REVISION"
    resources:
      requests:
        memory: 600Mi
        cpu: 300m
    readinessProbe:
      tcpSocket:
        port: 2380
      failureThreshold: 3
      initialDelaySeconds: 3
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    securityContext:
      privileged: true
    volumeMounts:
      - mountPath: /etc/kubernetes/manifests
        name: static-pod-dir
      - mountPath: /etc/kubernetes/static-pod-certs
        name: cert-dir
      - mountPath: /var/lib/etcd/
        name: data-dir
      - mountPath: /var/lib/etcd-backup/
        name: backup-dir
  hostNetwork: true
  priorityClassName: system-node-critical
  tolerations:
  - operator: "Exists"
  volumes:
    - hostPath:
        path: /etc/kubernetes/manifests
      name: static-pod-dir
    - hostPath:
        path: /etc/kubernetes/static-pod-resources/etcd-certs
      name: cert-dir
    - hostPath:
        path: /var/lib/etcd
        type: ""
      name: data-dir
    - hostPath:
        path: /var/lib/etcd-backup
        type: ""
      name: backup-dir
